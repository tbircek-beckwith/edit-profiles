using System;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.InteropServices;
using EditProfiles.Properties;

namespace EditProfiles.Operations
{
    /// <summary>
    /// Handles all error messages.
    /// </summary>
    internal static class ErrorHandler
    {

        #region Constants

        // System.Runtime.InteropServices.COMException (0x8001010A):
        // The message filter indicated that the application is busy.
        // (Exception from HRESULT: 0x8001010A ( RPC_E_SERVERCALL_RETRYLATER ))
        internal const UInt32 RPC_E_SERVERCALL_RETRYLATER = 0x8001010A;

        // System.Runtime.InteropServices.COMException (0x80010105): 
        // The server threw an exception.
        // (Exception from HRESULT: 0x80010105 ( RPC_E_SERVERFAULT ))
        internal const UInt32 RPC_E_SERVERFAULT = 0x80010105;

        // System.Runtime.InteropServices.COMException (0x800706BE):
        // The remote procedure call failed. 
        // (Exception from HRESULT: 0x800706BE ( RPC_E_SERVERFAILED ))
        internal const UInt32 RPC_E_SERVERFAILED = 0x800706BE;

        // System.Runtime.InteropServices.COMException (0x80040154):
        // The class not registered. (No Omicron Test Suite installed.)
        // (Exception from HRESULT: 0x80040154 ( REGDB_E_CLASSNOTREG ))
        internal const UInt32 REGDB_E_CLASSNOTREG = 0x80040154;

        #endregion

        #region Methods

        /// <summary>
        /// Logs the errors.
        /// </summary>
        /// <param name="ex">Exception generated.</param>
        /// <param name="fileName">Currently processed Omicron Control Center file name.</param>
        /// <returns>Exception.</returns>
        internal static Exception Log ( this Exception ex, string fileName = "Not specified" )
        {

            // Print Filename to the Debug window.
            Debug.WriteLine ( fileName );

            // Print to "Debug output"
            Debug.WriteLine ( string.Format ( CultureInfo.InvariantCulture, "{0} ", ex ), "Errors " );

            // Save to the fileOutputFolder
            Trace.TraceError ( string.Format ( CultureInfo.InvariantCulture, MyResources.Strings_ErrorTraceErrors, DateTime.Now, ex, Environment.NewLine, fileName ) );

            return ex;
        }

        // Following code to handle System.Runtime.InteropServices.COMException (0x8001010A) error.
        // Generated by Omicron Engine while closing and starting a new Omicron Application File.
        // unchecked ( ) is necessary to ignore overflow exceptions.
        // http://codereview.stackexchange.com/questions/582/handling-com-exceptions-busy-codes                
        internal static bool ShouldRetry ( this COMException e )
        {

#if DEBUG
            Console.WriteLine ( " ERROR HANDLING: 0x{0:X8} , will return {1} ", e.ErrorCode, e.ErrorCode == unchecked ( ( int ) RPC_E_SERVERCALL_RETRYLATER ) );
#endif

            return ( e.ErrorCode == unchecked ( ( int ) RPC_E_SERVERCALL_RETRYLATER ) );

        }

        ///// <summary>
        ///// Displays errors as a MessageBox for immediate attention.
        ///// </summary>
        ///// <param name="ex">Exception generated.</param>
        ///// <param name="msg">Default message to display if there is no error message from the exception.</param>
        ///// <param name="icon">Default to Error icon.</param>
        ///// <returns>Exception.</returns>
        //[Obsolete ( "For future use." )]
        //internal static Exception Display ( this Exception ex, string msg = null, MessageBoxIcon icon = MessageBoxIcon.Error )
        //{

        //    MessageBox.Show ( msg ?? ex.Message, "", MessageBoxButtons.OK, icon, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly );
        //    return ex;
        //}

        #endregion

    }
}
